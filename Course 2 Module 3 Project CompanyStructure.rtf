{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green0\blue0;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\ul\b\i\f0\fs40\lang9 Company Structure\ulnone\b0\i0\fs22\par
For this project you are going to practice using inheritance, interfaces and abstract classes to relate objects to one another. The following is a description of each class and its behavior. It is up to you to decide which classes should extend, implement or abstract which pieces to maximize your code sharing.\par
\par
\i Create an object ecosystem that includes each of the following classes:\i0\par
__________________________________________________________________________________\par
\ul\b Employee\ulnone\b0\tab\par
\cf1\i public \b Employee(String name, double baseSalary) \cf0\b0\i0 ;  --\tab Should construct a new employee object and take in two parameters, one for the name of the user and one for their base salary\par
\i public double \b getBaseSalary() \b0\i0 ;   --\tab Should return the employee's current salary\par
\i public String \b getName() \b0\i0 ;  --\tab Should return the employee's current name\par
\i public int \b getEmployeeID()  \b0\i0 ;  --\tab Should return the employee's ID. The ID should be issued on behalf of the employee at the time they are constructed. The first ever employee should have an ID of "1", the second "2" and so on\par
\i public Employee \b getManager() \b0\i0 ;  --\tab Should return a reference to the Employee object that represents this employee's manager\par
\i public boolean \b equals(Employee other) \b0\i0 ;  --\tab Should return true if the two employee IDs are the same, false otherwise\par
\i public String \b toString() \b0\i0 ;  --\tab Should return a String representation of the employee that is a combination of their id followed by their name. Example: "1 Kasey"\par
\i public String \b employeeStatus() \b0\i0 ;  --\tab Should return a String representation of that Employee's current status. This will be different for every subclass of Employee\par
\par
\par
__________________________________________________________________________________\par
\ul\b TechnicalEmployee\ulnone\b0\tab\par
\cf1\i public \b TechnicalEmployee(String name) \cf0\b0\i0 ;  --\tab Has a default base salary of 75000\par
\i public String \b employeeStatus() \b0\i0 ;  --\tab Should return a String representation of this TechnicalEmployee that includes their ID, name and how many successful check ins they have had. Example: "1 Kasey has 10 successful check ins"\par
\par
\par
__________________________________________________________________________________\par
\ul\b BusinessEmployee\ulnone\b0\par
\cf1\i public \b BusinessEmployee(String name) \cf0\b0\i0 ;  --\tab Has a default salary of 50000\par
\i public double \b getBonusBudget() \b0\i0 ;  --\tab Should establish a running tally of the remaining bonusBudget for the team this employee supports. How that budget is determined will depend on which type of Business Employee it is\par
\i public String \b employeeStatus() \b0\i0 ;  -- Should return a String representation of this BusinessEmployee that includes their ID, name and the size of their currently managed budget. Example: "1 Kasey with a budget of 22500.0"\par
\par
\par
__________________________________________________________________________________\par
\ul\b SoftwareEngineer\ulnone\b0\par
\cf1\i public \b SoftwareEngineer(String name) \cf0\b0\i0 ;  --\tab Should start without access to code and with 0 code check ins\par
\i public boolean \b getCodeAccess() \b0\i0 ;  --\tab Should return whether or not this SoftwareEngineer has access to make changes to the code base\par
\i public void \b setCodeAccess(boolean access) \b0\i0 ;  -- \tab Should allow an external piece of code to update the SoftwareEngieer's code privileges to either true or false\par
\i public int \b getSuccessfulCheckIns() \b0\i0 ;  --\tab Should return the current count of how many times this SoftwareEngineer has successfully checked in code\par
\i public boolean \b checkInCode() \b0\i0 ;  --\tab Should check if this SoftwareEngineer's manager approves of their check in. If the check in is approved their successful checkin count should be increased and the method should return "true". If the manager does not approve the check in the SoftwareEngineer's code access should be changed to false and the method should return "false"\par
\par
\par
__________________________________________________________________________________\par
\ul\b Accountant\ulnone\b0\par
\cf1\i public \b Accountant(String name) \cf0\b0\i0 ;  --\tab Should start with a bonus budget of 0 and no team they are officially supporting\par
\i public TechnicalLead \b getTeamSupported() \b0\i0 ;  --\tab Should return a reference to the TechnicalLead that this Accountant is currently supporting. If they have not been assigned a TechnicalLead null should be returned\par
\i public void \b supportTeam(TechnicalLead lead) \b0\i0 ;  --\tab Should allow a reference to a TechnicalLead to be passed in and saved. Once this happens the Accountant's bonus budget should be updated to be the total of each SoftwareEngineer's base salary that reports to that TechnicalLead plus 10%. For example, if the TechnicalLead supports 2 SoftwareEngineers, each with a salary of 75000, the Accountant's budget should be 150000 + 15000 for a total of 165000\par
\i public boolean \b approveBonus(double bonus) \b0\i0 ;  --\tab Should take in a suggested bonus amount and check if there is still enough room in the budget. If the bonus is greater than the remaining budget, false should be returned, otherwise true. If the accountant is not supporting any team false should be returned.\par
\i public String \b employeeStatus() \b0\i0 ;  --\tab Should return a String representation of this Accountant that includes their ID, name, the size of their currently managed budget and the name of the TechnicalLead they are currently supporting. Example: "1 Kasey with a budget of 22500.0 is supporting Satya Nadella"\par
\par
\par
__________________________________________________________________________________\par
\ul\b TechnicalLead\ulnone\b0\par
\cf1\i public \b TechnicalLead(String name) \cf0\b0\i0 ;  --\tab Should create a new TechnicalLead that is a Manager. The TechnicalLead's base salary should be 1.3 times that of a TechnicalEmployee. TechnicalLeads should have a default head count of 4.\par
\i public boolean \b hasHeadCount() \b0\i0 ;  --\tab Should return true if the number of direct reports this manager has is less than their headcount.\par
\i public boolean \b addReport(SoftwareEngineer e) \b0\i0 ;  --\tab Should accept the reference to a SoftwareEngineer object, and if the TechnicalLead has head count left should add this employee to their list of direct reports. If the employee is successfully added to the TechnicalLead's direct reports true should be returned, false should be returned otherwise\par
\i public boolean \b approveCheckIn(SoftwareEngineer e) \b0\i0 ;  --\tab Should see if the employee passed in does report to this manager and if their code access is currently set to "true". If both those things are true, true is returned, otherwise false is returned\par
\i public boolean \b requestBonus(Employee e, double bonus) \b0\i0 ;  --\tab Should check if the bonus amount requested would be approved by the BusinessLead supporting this TechnicalLead. If it is, that employee should get that bonus and true should be returned. False should be returned otherwise\par
\i public String \b getTeamStatus() \b0\i0 ;  --\tab Should return a String that gives insight into this Manager and all their direct reports. It should return a string that is a combination of the TechnicalLead's employee status followed by each of their direct employee's status on subsequent lines. If the TechnicalLead has no reports it should print their employee status followed by the text " and no direct reports yet ". Example: "10 Kasey has 5 successful check ins and no direct reports yet". If the TechnicalLead does have reports it might look something like "10 Kasey has 5 successful check ins and is managing: /n 5 Niky has 2 successful check ins"\par
\par
\par
__________________________________________________________________________________\par
\ul\b BusinessLead\ulnone\b0\par
\cf1\i public \b BusinessLead(String name) \cf0\b0\i0 ;  --\tab Should create a new BusinessLead that is a Manager. The BusinessLead's base salary should be twice that of an Accountant. They should start with a head count of 10.\par
\i public boolean \b hasHeadCount() \b0\i0 ;  --\tab Should return true if the number of direct reports this manager has is less than their headcount.\par
\i public boolean \b addReport(Accountant e, TechnicalLead supportTeam) \b0\i0 ;  --\tab Should accept the reference to an Accountant object, and if the BusinessLead has head count left should add this employee to their list of direct reports. If the employee is successfully added to the BusinessLead's direct reports true should be returned, false should be returned otherwise. Each time a report is added the BusinessLead's bonus budget should be increased by 1.1 times that new employee's base salary. That employee's team they are supporting should be updated to reflect the reference to the TechnicalLead given. If the employee is successfully added true should be returned, false otherwise.\par
\i public boolean \b requestBonus(Employee e, double bonus) \b0\i0 ;  --\tab Should check if the bonus amount requested would fit in current BusinessLead's budget. If it is, that employee should get that bonus, the BusinessLeader's budget should be deducted and true should be returned. False should be returned otherwise\par
\i public boolean \b approveBonus(Employee e, double bonus) \b0\i0 ;  --\tab This function should look through the Accountants the BusinessLead manages, and if any of them are supporting a the TechnicalLead that is the manager of the Employee passed in then the Accountant's budget should be consulted to see if the bonus could be afforded. If the team can afford the bonus it should be rewarded and true returned, false otherwise\par
\par
\par
__________________________________________________________________________________\par
\ul\i Here is my testing code that you can use to see if things are set up properly:\par
\ulnone\i0 public class CompanyStructure \{\par
    public static void main(String[] args) \{\par
        TechnicalLead CTO = new TechnicalLead("Satya Nadella");\par
        SoftwareEngineer seA = new SoftwareEngineer("Kasey");\par
        SoftwareEngineer seB = new SoftwareEngineer("Breana");\par
        SoftwareEngineer seC = new SoftwareEngineer("Eric");\par
        CTO.addReport(seA);\par
        CTO.addReport(seB);\par
        CTO.addReport(seC);\par
        System.out.println(CTO.getTeamStatus());\par
\par
        TechnicalLead VPofENG = new TechnicalLead("Bill Gates");\par
        SoftwareEngineer seD = new SoftwareEngineer("Winter");\par
        SoftwareEngineer seE = new SoftwareEngineer("Libby");\par
        SoftwareEngineer seF = new SoftwareEngineer("Gizan");\par
        SoftwareEngineer seG = new SoftwareEngineer("Zaynah");\par
        VPofENG.addReport(seD);\par
        VPofENG.addReport(seE);\par
        VPofENG.addReport(seF);\par
        VPofENG.addReport(seG);\par
        System.out.println(VPofENG.getTeamStatus());\par
\par
        BusinessLead CFO = new BusinessLead("Amy Hood");\par
        Accountant actA = new Accountant("Niky");\par
        Accountant actB = new Accountant("Andrew");\par
        CFO.addReport(actA, CTO);\par
        CFO.addReport(actB, VPofENG);\par
        System.out.println(CFO.getTeamStatus());\par
    \}\par
\}\par
}
 